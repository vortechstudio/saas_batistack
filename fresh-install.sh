#!/bin/bash

# =============================================================================
# SCRIPT D'INSTALLATION NEUVE - BATISTACK SAAS
# =============================================================================
# Ce script est con√ßu pour la premi√®re installation de l'application BatiStack
# sur un serveur via Vito Deploy
# =============================================================================

set -e  # Arr√™ter le script en cas d'erreur

# Variables Vito Deploy
RELEASE_PATH=${VITO_RELEASE_PATH:-$PWD}
SHARED_PATH=${VITO_SHARED_PATH:-"$PWD/../shared"}

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[VITO-INSTALL]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[VITO-INSTALL]${NC} ‚úÖ $1"
}

log_warning() {
    echo -e "${YELLOW}[VITO-INSTALL]${NC} ‚ö†Ô∏è  $1"
}

log_error() {
    echo -e "${RED}[VITO-INSTALL]${NC} ‚ùå $1"
}

# =============================================================================
# D√âBUT DE L'INSTALLATION
# =============================================================================

log_info "üöÄ D√©marrage de l'installation neuve de BatiStack..."
log_info "üìÅ R√©pertoire de release: $RELEASE_PATH"
log_info "üìÅ R√©pertoire partag√©: $SHARED_PATH"

# =============================================================================
# 1. CR√âATION DES R√âPERTOIRES PARTAG√âS
# =============================================================================

log_info "üìÇ Cr√©ation des r√©pertoires partag√©s..."

# Cr√©er les r√©pertoires partag√©s s'ils n'existent pas
mkdir -p "$SHARED_PATH/storage/app/private"
mkdir -p "$SHARED_PATH/storage/app/public"
mkdir -p "$SHARED_PATH/storage/framework/cache"
mkdir -p "$SHARED_PATH/storage/framework/sessions"
mkdir -p "$SHARED_PATH/storage/framework/testing"
mkdir -p "$SHARED_PATH/storage/framework/views"
mkdir -p "$SHARED_PATH/storage/logs"
mkdir -p "$SHARED_PATH/bootstrap/cache"

log_success "R√©pertoires partag√©s cr√©√©s"

# =============================================================================
# 2. CONFIGURATION DU FICHIER .ENV
# =============================================================================

log_info "‚öôÔ∏è  Configuration du fichier .env..."

# Copier le fichier .env.example vers le r√©pertoire partag√© si .env n'existe pas
if [ ! -f "$SHARED_PATH/.env" ]; then
    if [ -f "$RELEASE_PATH/.env.example" ]; then
        cp "$RELEASE_PATH/.env.example" "$SHARED_PATH/.env"
        log_success "Fichier .env cr√©√© √† partir de .env.example"
    else
        log_error "Fichier .env.example introuvable!"
        exit 1
    fi
else
    log_warning "Fichier .env existe d√©j√†, conservation de la configuration actuelle"
fi

# =============================================================================
# 3. LIENS SYMBOLIQUES
# =============================================================================

log_info "üîó Configuration des liens symboliques..."

# Supprimer les r√©pertoires/fichiers existants s'ils existent
[ -d "$RELEASE_PATH/storage" ] && rm -rf "$RELEASE_PATH/storage"
[ -f "$RELEASE_PATH/.env" ] && rm -f "$RELEASE_PATH/.env"
[ -d "$RELEASE_PATH/bootstrap/cache" ] && rm -rf "$RELEASE_PATH/bootstrap/cache"

# Cr√©er les liens symboliques
ln -nfs "$SHARED_PATH/.env" "$RELEASE_PATH/.env"
ln -nfs "$SHARED_PATH/storage" "$RELEASE_PATH/storage"
ln -nfs "$SHARED_PATH/bootstrap/cache" "$RELEASE_PATH/bootstrap/cache"

log_success "Liens symboliques configur√©s"

# =============================================================================
# 4. INSTALLATION DES D√âPENDANCES COMPOSER
# =============================================================================

log_info "üì¶ Installation des d√©pendances Composer..."

composer install --no-dev --optimize-autoloader --classmap-authoritative --no-interaction --prefer-dist

log_success "D√©pendances Composer install√©es"

# =============================================================================
# 5. G√âN√âRATION DE LA CL√â D'APPLICATION
# =============================================================================

log_info "üîë G√©n√©ration de la cl√© d'application..."

# V√©rifier si APP_KEY existe dans le .env
if ! grep -q "APP_KEY=" "$SHARED_PATH/.env" || grep -q "APP_KEY=$" "$SHARED_PATH/.env"; then
    php artisan key:generate --force
    log_success "Cl√© d'application g√©n√©r√©e"
else
    log_warning "Cl√© d'application d√©j√† pr√©sente"
fi

# =============================================================================
# 6. INSTALLATION DES D√âPENDANCES NPM/YARN ET BUILD
# =============================================================================

log_info "üé® Installation des d√©pendances frontend et compilation..."

if command -v yarn &> /dev/null; then
    yarn install --frozen-lockfile --production=false
    yarn build
    log_success "Assets compil√©s avec Yarn"
else
    npm ci
    npm run build
    log_success "Assets compil√©s avec NPM"
fi

# =============================================================================
# 7. CONFIGURATION DES PERMISSIONS
# =============================================================================

log_info "üîí Configuration des permissions..."

# D√©finir les bonnes permissions
chown -R www-data:www-data "$SHARED_PATH/storage"
chown -R www-data:www-data "$SHARED_PATH/bootstrap/cache"
chmod -R 755 "$SHARED_PATH/storage"
chmod -R 755 "$SHARED_PATH/bootstrap/cache"

log_success "Permissions configur√©es"

# =============================================================================
# 8. OPTIMISATION LARAVEL
# =============================================================================

log_info "‚ö° Optimisation de l'application Laravel..."

php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan event:cache

# Commandes sp√©cifiques √† BatiStack (si elles existent)
php artisan icons:cache 2>/dev/null || log_warning "Commande icons:cache non disponible"
php artisan lang:cache 2>/dev/null || log_warning "Commande lang:cache non disponible"

log_success "Optimisations appliqu√©es"

# =============================================================================
# 9. MIGRATION DE LA BASE DE DONN√âES
# =============================================================================

log_info "üóÑÔ∏è  Ex√©cution des migrations de base de donn√©es..."

php artisan migrate --force

log_success "Migrations ex√©cut√©es"

# =============================================================================
# 10. SEEDERS (OPTIONNEL)
# =============================================================================

log_info "üå± Ex√©cution des seeders..."

# Ex√©cuter les seeders seulement si la variable VITO_RUN_SEEDERS est d√©finie
if [ "${VITO_RUN_SEEDERS:-false}" = "true" ]; then
    php artisan db:seed --force
    log_success "Seeders ex√©cut√©s"
else
    log_warning "Seeders ignor√©s (d√©finir VITO_RUN_SEEDERS=true pour les ex√©cuter)"
fi

# =============================================================================
# 11. CR√âATION DU LIEN DE STOCKAGE PUBLIC
# =============================================================================

log_info "üîó Cr√©ation du lien de stockage public..."

php artisan storage:link

log_success "Lien de stockage cr√©√©"

# =============================================================================
# 12. CONFIGURATION DES QUEUES ET HORIZON
# =============================================================================

log_info "üîÑ Configuration des queues..."

# Red√©marrer les queues
php artisan queue:restart

# Terminer Horizon s'il est en cours d'ex√©cution
php artisan horizon:terminate 2>/dev/null || log_warning "Horizon non disponible ou non d√©marr√©"

log_success "Queues configur√©es"

# =============================================================================
# 13. NETTOYAGE FINAL
# =============================================================================

log_info "üßπ Nettoyage final..."

# Nettoyer les caches de d√©veloppement
php artisan cache:clear
php artisan config:clear

# Nettoyer les caches NPM/Yarn
if command -v yarn &> /dev/null; then
    yarn cache clean
else
    npm cache clean --force
fi

log_success "Nettoyage termin√©"

# =============================================================================
# 14. V√âRIFICATION DE SANT√â
# =============================================================================

log_info "üè• V√©rification de sant√© de l'application..."

# V√©rifier que l'application r√©pond
if php artisan tinker --execute="echo 'OK';" &>/dev/null; then
    log_success "Application op√©rationnelle"
else
    log_error "Probl√®me d√©tect√© avec l'application"
    exit 1
fi

# =============================================================================
# FIN DE L'INSTALLATION
# =============================================================================

log_success "üéâ Installation neuve de BatiStack termin√©e avec succ√®s!"
log_info "üìã Prochaines √©tapes recommand√©es:"
log_info "   1. V√©rifier la configuration .env"
log_info "   2. Configurer les services externes (Stripe, etc.)"
log_info "   3. Tester l'application"
log_info "   4. Configurer les sauvegardes automatiques"

exit 0